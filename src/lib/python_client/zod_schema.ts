// Generated by ts-to-zod
import { z } from "zod";

export const availableModelsSchema = z.literal("gpt-3.5-turbo");

export const embeddingResponseSchema = z.object({
  data: z.array(z.number()),
});

export const validationErrorSchema = z.object({
  loc: z.array(z.union([z.string(), z.number()])),
  msg: z.string(),
  type: z.string(),
});

export const roleSchema = z.union([
  z.literal("system"),
  z.literal("user"),
  z.literal("assistant"),
]);

export const pingResponseSchema = z.object({
  message: z.string(),
});

export const spacyTokenSchema = z.object({
  text: z.string(),
  pos: z.string(),
  dep: z.string(),
  lemma: z.string(),
});

export const messageSchema = z.object({
  role: roleSchema,
  content: z.string(),
});

export const hTTPValidationErrorSchema = z.object({
  detail: z.array(validationErrorSchema).optional(),
});

export const spacyProcessResponseSchema = z.object({
  data: z.array(spacyTokenSchema),
});

export const chatStreamRequestSchema = z.object({
  messages: z.array(messageSchema),
  model: availableModelsSchema,
});

export const openApiTsSchema = z.object({
  "/": z.object({
    get: z.object({
      res: z.object({
        200: pingResponseSchema,
      }),
    }),
  }),
  "/embed": z.object({
    get: z.object({
      req: z.object({
        text: z.string(),
      }),
      res: z.object({
        200: embeddingResponseSchema,
      }),
    }),
  }),
  "/process": z.object({
    get: z.object({
      req: z.object({
        text: z.string(),
      }),
      res: z.object({
        200: spacyProcessResponseSchema,
      }),
    }),
  }),
  "/chat/stream": z.object({
    post: z.object({
      req: z.object({
        requestBody: chatStreamRequestSchema,
      }),
      res: z.object({
        200: z.any(),
      }),
    }),
  }),
});
