// Generated by ts-to-zod
import { z } from "zod";

export const availableModelsSchema = z.literal("gpt-3.5-turbo");

export const depTagSchema = z.union([
  z.literal("ROOT"),
  z.literal("acl"),
  z.literal("advcl"),
  z.literal("advmod"),
  z.literal("amod"),
  z.literal("appos"),
  z.literal("aux"),
  z.literal("case"),
  z.literal("cc"),
  z.literal("ccomp"),
  z.literal("compound"),
  z.literal("conj"),
  z.literal("cop"),
  z.literal("csubj"),
  z.literal("dep"),
  z.literal("det"),
  z.literal("expl"),
  z.literal("fixed"),
  z.literal("flat"),
  z.literal("iobj"),
  z.literal("mark"),
  z.literal("nmod"),
  z.literal("nsubj"),
  z.literal("nummod"),
  z.literal("obj"),
  z.literal("obl"),
  z.literal("parataxis"),
  z.literal("punct"),
  z.literal("xcomp"),
]);

export const embeddingResponseSchema = z.object({
  data: z.array(z.number()),
});

export const validationErrorSchema = z.object({
  loc: z.array(z.union([z.string(), z.number()])),
  msg: z.string(),
  type: z.string(),
});

export const roleSchema = z.union([
  z.literal("system"),
  z.literal("user"),
  z.literal("assistant"),
]);

export const pingResponseSchema = z.object({
  message: z.string(),
});

export const posTagSchema = z.union([
  z.literal("ADJ"),
  z.literal("ADP"),
  z.literal("PUNCT"),
  z.literal("ADV"),
  z.literal("AUX"),
  z.literal("SYM"),
  z.literal("INTJ"),
  z.literal("CCONJ"),
  z.literal("X"),
  z.literal("NOUN"),
  z.literal("DET"),
  z.literal("PROPN"),
  z.literal("NUM"),
  z.literal("VERB"),
  z.literal("PART"),
  z.literal("PRON"),
  z.literal("SCONJ"),
]);

export const spacyTokenSchema = z.object({
  text: z.string(),
  pos: posTagSchema,
  dep: depTagSchema,
  lemma: z.string(),
  is_sent_start: z.boolean(),
});

export const messageSchema = z.object({
  role: roleSchema,
  content: z.string(),
});

export const hTTPValidationErrorSchema = z.object({
  detail: z.array(validationErrorSchema).optional(),
});

export const spacyProcessResponseSchema = z.object({
  data: z.array(spacyTokenSchema),
});

export const chatStreamRequestSchema = z.object({
  messages: z.array(messageSchema),
  model: availableModelsSchema,
});

export const openApiTsSchema = z.object({
  "/": z.object({
    get: z.object({
      res: z.object({
        200: pingResponseSchema,
      }),
    }),
  }),
  "/embed": z.object({
    get: z.object({
      req: z.object({
        text: z.string(),
      }),
      res: z.object({
        200: embeddingResponseSchema,
      }),
    }),
  }),
  "/process": z.object({
    get: z.object({
      req: z.object({
        text: z.string(),
      }),
      res: z.object({
        200: spacyProcessResponseSchema,
      }),
    }),
  }),
  "/chat/stream": z.object({
    post: z.object({
      req: z.object({
        requestBody: chatStreamRequestSchema,
      }),
      res: z.object({
        200: z.any(),
      }),
    }),
  }),
});
