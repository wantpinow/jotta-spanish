// This file is auto-generated by @hey-api/openapi-ts

/**
 * An enumeration.
 */
export type AvailableModels = "gpt-3.5-turbo";

export type ChatStreamRequest = {
  messages: Array<Message>;
  model: AvailableModels;
};

/**
 * An enumeration.
 */
export type DepTag =
  | "ROOT"
  | "acl"
  | "advcl"
  | "advmod"
  | "amod"
  | "appos"
  | "aux"
  | "case"
  | "cc"
  | "ccomp"
  | "compound"
  | "conj"
  | "cop"
  | "csubj"
  | "dep"
  | "det"
  | "expl"
  | "fixed"
  | "flat"
  | "iobj"
  | "mark"
  | "nmod"
  | "nsubj"
  | "nummod"
  | "obj"
  | "obl"
  | "parataxis"
  | "punct"
  | "xcomp";

export type EmbeddingResponse = {
  data: Array<number>;
};

export type HTTPValidationError = {
  detail?: Array<ValidationError>;
};

export type Message = {
  role: Role;
  content: string;
};

export type PingResponse = {
  message: string;
};

/**
 * An enumeration.
 */
export type PosTag =
  | "ADJ"
  | "ADP"
  | "PUNCT"
  | "ADV"
  | "AUX"
  | "SYM"
  | "INTJ"
  | "CCONJ"
  | "X"
  | "NOUN"
  | "DET"
  | "PROPN"
  | "NUM"
  | "VERB"
  | "PART"
  | "PRON"
  | "SCONJ";

/**
 * An enumeration.
 */
export type Role = "system" | "user" | "assistant";

export type SpacyProcessResponse = {
  data: Array<SpacyToken>;
};

export type SpacyToken = {
  text: string;
  pos: PosTag;
  dep: DepTag;
  lemma: string;
  is_sent_start: boolean;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type $OpenApiTs = {
  "/": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: PingResponse;
      };
    };
  };
  "/embed": {
    get: {
      req: {
        text: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: EmbeddingResponse;
      };
    };
  };
  "/process": {
    get: {
      req: {
        text: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: SpacyProcessResponse;
      };
    };
  };
  "/chat/stream": {
    post: {
      req: {
        requestBody: ChatStreamRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: any;
      };
    };
  };
};
